<?xml version="1.0" encoding="utf-8"?>

<root>
    <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
        <xsd:element name="root" msdata:IsDataSet="true">
            
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>1.3</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <data name="UnitTypeEnd" xml:space="preserve">
        <value>
    #endregion
}
</value>
    </data>
    <data name="UnitTypeStart" xml:space="preserve">
        <value>public record $UnitType$(string Name, string Symbol, double Coefficient=1, double Offset=0) 
    : IUnitOfMeasure&lt;$UnitType$&gt;
{
    public $UnitType$(string Name, string Symbol, $UnitType$ baseUnit, double Coefficient, double Offset = 0) 
        : this(Name,Symbol,baseUnit.Coefficient*Coefficient,baseUnit.Coefficient*baseUnit.Offset+Offset)
    {
        Debug.WriteLine($"{this}");
    }
    
    #region Equality members

    public virtual bool Equals($UnitType$? other)
    {
        return Coefficient.Equals(other.Coefficient) &amp;&amp; Offset.Equals(other.Offset);
    }

    public override int GetHashCode()
    {
        return HashCode.Combine(Coefficient, Offset, typeof($UnitType$));
    }
    
    #endregion

    #region Relational members

    public int CompareTo($UnitType$ other)
    {
        var factorComparison = Coefficient.CompareTo(other.Coefficient);
        return factorComparison != 0 ? factorComparison : Offset.CompareTo(other.Offset);
    }

    public int CompareTo(object? obj)
    {
        if (ReferenceEquals(null, obj)) return 1;
        return obj is $UnitType$ other ? CompareTo(other) : throw new ArgumentException($"Object must be of type {nameof($UnitType$)}");
    }

    public static bool operator &lt;($UnitType$ left, $UnitType$ right)
    {
        return left.CompareTo(right) &lt; 0;
    }

    public static bool operator &gt;($UnitType$ left, $UnitType$ right)
    {
        return left.CompareTo(right) &gt; 0;
    }

    public static bool operator &lt;=($UnitType$ left, $UnitType$ right)
    {
        return left.CompareTo(right) &lt;= 0;
    }

    public static bool operator &gt;=($UnitType$ left, $UnitType$ right)
    {
        return left.CompareTo(right) &gt;= 0;
    }

    #endregion
    
    #region Predefined $UnitType$ Units
    
</value>
    </data>
    <data name="BaseUnitEntry" xml:space="preserve">
        <value>    public static $TypeName$ $UnitType$ = new ("$UnitName$", "$Symbol$");</value>
    </data>
    <data name="DerivedUnitEntry" xml:space="preserve">
        <value>    public static $TypeName$ $UnitType$ = new ("$UnitName$", "$Symbol$", $BaseUnit$, $Coefficient$, $Offset$);</value>
    </data>
</root>